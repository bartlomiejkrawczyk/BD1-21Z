/** Czyszczenie schematu
Procedura usuwujaca tabele, jeśli istnieją 
*/

DECLARE
    v_count  INT;
    v_name VARCHAR2(20);
    TYPE namesarray IS VARRAY(15) OF VARCHAR2(20);
    names    namesarray;
BEGIN
    names := namesarray('regions', 'countries', 'reg_countries', 'addresses', 'positions', 'positions_history',
                       'emp_status', 'departments', 'employees', 'dependents',
                       'project_status', 'projects', 'emp_projects',
                       'grades', 'emp_grades');

    FOR i IN 1..names.count LOOP
        v_name := names(i);
        
        SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = upper(v_name);
        IF v_count = 1 THEN
            DBMS_OUTPUT.PUT_LINE('Dropping table: ' || v_name);
            EXECUTE IMMEDIATE 'DROP TABLE '|| v_name || ' CASCADE CONSTRAINTS';
        END IF;
    END LOOP;
END;

/

-- tabela regiony 
CREATE TABLE regions
(
  region_id NUMBER (4) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000 CONSTRAINT reg_PK PRIMARY KEY,
  name VARCHAR2 (40) NOT NULL,
  shortname VARCHAR2(10)
);
  
-- tabela kraje 
CREATE TABLE countries
(
  country_id NUMBER (4) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000  CONSTRAINT countries_pk PRIMARY KEY,
  name VARCHAR2 (40) NOT NULL ,
  capital VARCHAR2 (40) NOT NULL, 
  population NUMBER CONSTRAINT countries_pop_check CHECK (population > 0 ),
  language VARCHAR2(50),
  currency VARCHAR2(10),
  domain VARCHAR2(5),
  code VARCHAR2(5),
  phone_code VARCHAR2(5)
 );

-- powiązanie miedzy krajami a regionami (kraje-regiony relacja n-n)
CREATE TABLE reg_countries (
  rc_id NUMBER (4) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000 CONSTRAINT rc_PK PRIMARY KEY,
  region_id NUMBER NOT NULL REFERENCES regions (region_id),
  country_id NUMBER NOT NULL REFERENCES countries (country_id)
);
  
-- tabela z adresami 
CREATE TABLE addresses
(
  address_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000  CONSTRAINT addr_pk PRIMARY KEY,
  street VARCHAR2 (40) NOT NULL ,
  postal_code VARCHAR2 (40 ) NOT NULL ,
  city VARCHAR2 (40 ) NOT NULL ,
  country_id NUMBER (4) NOT NULL CONSTRAINT addr_country_fk REFERENCES countries (country_id)
 );
  
  
-- tabela ze stanowiskami 

CREATE TABLE positions
(
  position_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000  CONSTRAINT pos_pk PRIMARY KEY ,
  name VARCHAR2 (40) NOT NULL ,
  min_salary NUMBER (7,2) ,
  max_salary NUMBER (7,2)
);
  
-- tabela Zaklady/departamenty
CREATE TABLE departments
(
  department_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000  CONSTRAINT dep_pk PRIMARY KEY  ,
  name VARCHAR2 (40) NOT NULL ,
  established DATE NOT NULL,
  year_budget NUMBER, 
  contact_number VARCHAR2(30),
  address_id NUMBER (4) NOT NULL CONSTRAINT dep_addr_fk REFERENCES addresses (address_id) ,
  manager_id NUMBER (4)
);

-- tabela slownikowa ze statusem pracowników
CREATE TABLE emp_status
(
  status_id NUMBER CONSTRAINT emp_status_pk PRIMARY KEY,
  name VARCHAR2 (30) NOT NULL
);
  
-- tabela pracownicy
CREATE TABLE employees
(
  employee_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000  CONSTRAINT emp_pk PRIMARY KEY,
  name VARCHAR2 (40) NOT NULL ,
  surname VARCHAR2 (40) NOT NULL ,
  birth_date DATE NOT NULL,
  gender CHAR (1) CONSTRAINT emp_gender_check CHECK (gender IN ('K', 'M', 'N')),
  status_id CONSTRAINT emp_emp_status_fk REFERENCES emp_status (status_id),
  salary NUMBER (7,2) ,
  date_employed DATE ,
  department_id NUMBER (4) CONSTRAINT emp_dep_fk REFERENCES departments (department_id) ,
  manager_id NUMBER (4) CONSTRAINT emp_emp_fk REFERENCES employees (employee_id),
  position_id NUMBER (4) CONSTRAINT emp_pos_fk REFERENCES positions (position_id)
);
  
-- tabela z historia stanowisk dla pracownika
CREATE TABLE positions_history
(
  ph_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 2000  CONSTRAINT ph_pk PRIMARY KEY,
  employee_id NUMBER (4) NOT NULL CONSTRAINT ph_emp_fk REFERENCES employees (employee_id),
  position_id NUMBER (4) NOT NULL CONSTRAINT ph_pos_fk REFERENCES positions (position_id),
  date_start DATE NOT NULL,
  date_end DATE
);

-- powiazania pracownikow i departamentow (menedzer id)
ALTER TABLE departments ADD CONSTRAINT dep_emp_fk FOREIGN KEY (manager_id) REFERENCES employees (employee_id) ;

-- tabele z dziecmi pracowników
CREATE TABLE dependents
(
  dependent_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 100  CONSTRAINT dependents_pk PRIMARY KEY,
  name VARCHAR2(50) NOT NULL,
  surname VARCHAR2(50) NOT NULL,
  birth_date DATE NOT NULL,
  gender CHAR (1) CONSTRAINT dep_gender_check CHECK (gender IN ('K', 'M', 'N')),
  employee_id NUMBER REFERENCES employees (employee_id)
);

-- tabela ze statusem projektów
CREATE TABLE project_status
(
  ps_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000  CONSTRAINT ps_pk PRIMARY KEY,
  name VARCHAR2(20) NOT NULL
);

-- tabela z projektami
CREATE TABLE projects
(
  project_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000  CONSTRAINT projects_pk PRIMARY KEY,
  name VARCHAR2(50) NOT NULL,
  status NUMBER REFERENCES project_status(ps_id),
  owner NUMBER REFERENCES departments (department_id),
  estimated_budget NUMBER,
  used_budget NUMBER,
  date_start DATE,
  date_end DATE
);

-- tabela z powiazaniem pracownikow z projektami

CREATE TABLE emp_projects
(
  pe_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000  CONSTRAINT pe_pk PRIMARY KEY,
  employee_id NUMBER REFERENCES employees (employee_id),
  project_id NUMBER REFERENCES projects (project_id),
  date_start DATE NOT NULL,
  date_end DATE
);

-- tabela slownikowa z ocenami pracowników
CREATE TABLE grades
(
  grade_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000  CONSTRAINT grade_pk PRIMARY KEY,
  grade NUMBER NOT NULL,
  description VARCHAR2(50) NOT NULL
);
-- powiazania pracownika z oceną 
CREATE TABLE emp_grades
(
  eg_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000  CONSTRAINT emp_grade_pk PRIMARY KEY,
  employee_id NUMBER REFERENCES employees (employee_id) NOT NULL,
  grade_id NUMBER REFERENCES grades (grade_id) NOT NULL,
  inspection_date DATE NOT NULL,
  period NUMBER NOT NULL
);

